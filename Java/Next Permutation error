import java.util.Random;
public class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 1){return;}
        
        int index = findIndex(nums);
        reOrder(nums,index);
        
        return;
    }
    
    public int findIndex(int[] nums){
        for(int i = nums.length - 1; i != 0; --i){
            if(nums[i] < nums[i-1]){return i;}
        }
        return 0;
    }
    
    public void reOrder(int[] nums, int index){
        int toSwap = nextLargestIndex(nums,index);
        swap(nums, index, toSwap);//error here fix it tomorrow
        sort(nums, index, nums.length - 1);
    }
    
    public int nextLargestIndex(int[] nums, int index){
        int larger = Integer.MAX_VALUE;
        int successor = index;
        
        for(int i = index + 1; i < nums.length; ++i){
            if(nums[i] > nums[index] && larger > nums[i] ){    
                larger = nums[i];
                successor = i;
            }
        }
        return successor;
    }
    
    public void sort(int[] nums, int start, int end){
        if(end - start == nums.length){
            for(int i = 0; i < nums.length/2; ++i){
                swap(nums, i, end - i);
            }
            return;
        }
        if(start <= end){return;}
        
        int index = partition(nums, start, end);
        sort(nums, start, index - 1);
        sort(nums, index + 1, end);
        return;
    }
    
    public int partition(int[] nums, int start, int end){
        Random random = new Random();
        int randPivot = random.nextInt(end - start + 1) + start;//Pick a random pivot.
        swap(nums,randPivot,end);//Move that pivot to the back for now.
        
        int smaller = start;//"large" gives the position of where to swap the next element larger than the pivot. 
        for(int i = start; i <= end; ++i){
            if(nums[i] < nums[end]){//Find the elements that are larger than the pivot.
                if(i != smaller)//We only need to swap if "i" is ahead of "larger".
                    swap(nums, smaller, i);
                ++smaller;//update to the next valid swap position. 
            }
        }
        swap(nums, end, smaller);//Put the pivot in its proper place.
        return smaller;//Return the index of where the random pivot is placed.
    }
    //Simple function that swaps two number in an array of ints.
    public void swap(int[] nums, int i1, int i2){
        int temp = nums[i1];
        nums[i1] = nums[i2];
        nums[i2] = temp;
    }
}
